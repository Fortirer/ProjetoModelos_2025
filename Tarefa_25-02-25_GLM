
library(ggplot2)
#install.packages("mgcv")
library(mgcv)
library(dplyr)
getwd()
setwd("C:/Users/LAFIECO/Documents/Doutorado_GDrive/PhD/Soybean_Paper1/DadosModeloGLM") 

# vai mudando o nome do arquivo limpar a cash e apagar as memórias dos objetos
# os arquivos estao somento com um tratamento, por exemplo so com AMb ou Elev, etc
# fazer para cada tratamento a funcao modelo <- glm(Grain ~ TotalBiomass, data = df, family='Gamma'(link='log'))
# depois na interecao rodar com outro script antes
# e ver a interacao 

#df <- read.table("dfAmb2_60dias.csv", sep=";")
df <- read.csv("dfTriple_60dias_SemGraoAbortado.csv", sep=";")# deu problema na leitura, tudo lendo como caracteres entao  vou abrir arquivo com read.table
df <- read.csv("dfElevDrought_60dias.csv", sep=";") 
df <- read.csv("SojaModelagemDrought.csv", sep=";")
df <- read.csv("SojaModelagemTriple.csv", sep=";")
df <- read.csv("SojaModelagemElevDrought.csv", sep=";")

df <- read.csv("SojaModelagemSample.csv", sep=";") # dados com temp abortado

str(df)

# Garantir que Trataments é fator e reordenar os níveis
df$Trataments <- factor(df$Trataments, levels = c("Amb","Elev","Temp", "Drought","ElevTemp","ElevDrought" ))

df = df[df$Trataments == "Amb",]
df$Trataments <- as.factor(df$Trataments)
df
str(df)

modelo <- glm(Grain ~ TotalBiomass60Days:Trataments, data = df, family='Gamma'(link='identity')) # ver link inverse temp or log
modelo <- glm(Grain ~ TotalBiomass60Days, data = df, family='Gamma'(link='identity')) 
modelo <- glm(Grain ~ Trataments, data = df, family='Gamma'(link='identity')) # ver link inverse temp or log # inverse
# ver link inverse temp or log # inverse
summary(modelo)


# Padronizar as variáveis contínuas
df <- df %>%
  mutate(across(c(Grain,  G_Starch , G_SS,  Protein, Aminoacids, G_Lipid), scale))



modelo <- glm(Grain ~ TotalBiomass60Days:Trataments, data = df)
#glm(Grain ~ TotalBiomass60Days:Trataments, family='Gamma'(link='identity'), data = df)
# Criar gráfico com as retas ajustadas para cada tratamento

#modelo <- lm(Grain ~ TotalBiomass60Days + Amb + Temp + Elev, data = df) 
summary(modelo)

# Criar previsões para o modelo
df$predicted <- predict(glm(Grain ~ TotalBiomass60Days:Trataments, 
                            family='Gamma'(link='identity'), data = df), 
                        type = "response")
# Criar gráfico com as retas ajustadas para cada tratamento
ggplot(df, aes(x = TotalBiomass60Days, y = Grain, color = Trataments)) +
  geom_point(alpha = 0.6) +  # Adiciona pontos ao gráfico
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Adiciona retas ajustadas
  theme_minimal() +
  labs(title = "",
       x = "Biomassa Total (60 dias)",
       y = "Produção de Grãos (125 dias)") +
  theme(legend.title = element_blank())  # Remove título da legenda



summary(lm(Grain ~ TotalBiomass60Days:Trataments,  data = df))

cor(data$Amb, data$Temp)

#modelo <- glm(Grain ~ Amb*Temp, data = df, family='Gamma'(link='identity')) # ver link inverse temp or log

#modelo <- glm(Grain ~ TotalBiomass, data = df, family='gaussian'(link='identity')) # ver link inverse temp
#modelo1 <- glm(G_SS ~ TotalBiomass_60dias, data = df, family='Gamma'(link='log')) 
#modelo <- glm(Starch ~ TratamentsAmb.Drought*TratamentsElev, data = df, family='Gamma'(link='identity')) # ver link inverse temp or log

summary(modelo)
#summary(modelo1)

# calcular os valores preditos
valores_preditos <- predict(modelo, type = "response")
# Calcular os valores observados
valores_observados <- df$Grain #### trocar de acordo com avariavel resposta dependente do modelo

# Calcular o tamanho da amostra
tamanho_amostra <- length(valores_observados)

# VALORES OBSERVADOR
# Calcular a média
media <- mean(valores_observados)
media

# Calcular o desvio padrão
desvio_padrao <- sd(valores_observados)
desvio_padrao

# Calcular o erro padrão da média
erro_media <- desvio_padrao / sqrt(tamanho_amostra)
erro_media

# VALORES PREDITOS
# Calcular a média
media <- mean(valores_preditos)
media

# Calcular o desvio padrão
desvio_padrao <- sd(valores_preditos)
desvio_padrao

# Calcular o erro padrão da média
erro_media <- desvio_padrao / sqrt(tamanho_amostra)
erro_media

# Calcular o erro quadrático  RMSE
erro_quadratico <- (valores_observados - valores_preditos) ^ 2

# Calcular a média dos erros quadráticos
media_erro_quadratico <- mean(erro_quadratico)

# Calcular o RMSE
rmse <- sqrt(media_erro_quadratico)
rmse

# Calcular o R² manualmente
SSE <- sum((valores_observados - valores_preditos)^2)  # Soma dos erros quadráticos (residuais)
SST <- sum((valores_observados - mean(valores_observados))^2)  # Soma total dos quadrados

R2 <- 1 - (SSE / SST)
R2

summary(modelo)$r.squared

######################

# MODELO COM INTERACAO

#####################

df <- read.csv("SojaModelagemSample.csv", sep=";")

str(df)
# Selecionar dois tratamentos específicos
df <- subset(df, Trataments %in% c("ElevDrought", "ElevTemp"))


# Padronizar as variáveis contínuas
df<- df %>%
  mutate(across(c(G_SS, G_Lipid, G_Starch, Aminoacids, Protein ), scale))


df$Temp_Drought_Interaction <- as.integer(df$Trataments %in% c("ElevDrought", "ElevTemp"))
df
str(df)
df$Trataments <- as.factor(df$Trataments)
#df$Dro <- as.integer(df$Trataments %in% c('AmbDrought'))
df$Trataments

# Converte categorica coluna para numericaca
for (column in names(df)[sapply(df, is.factor)]) {
  df[[column]] <- as.integer(as.numeric(df[[column]]))
}

modelo <- glm(Protein ~ TotalBiomass60Days:Temp_Drought_Interaction, data = df, family='gaussian'(link='identity')) #identity
#modelo <- glm(Grain ~ Temp_Drought_Interaction-1, data = df, family='Gamma'(link='identity')) #identity
modelo <- glm(Protein ~ Temp_Drought_Interaction, data = df) #identity
modelo <- glm(Protein~ Temp_Drought_Interaction, data = df, family='gaussian'(link='identity'))
?glm
summary(modelo)

valores_preditos <- predict(modelo, type = "response")
# Calcular os valores observados
valores_observados <- df$Protein

# Calcular o tamanho da amostra
tamanho_amostra <- length(valores_observados)

# VALORES OBSERVADOR
# Calcular a média
media <- mean(valores_observados)
media

# Calcular o desvio padrão
desvio_padrao <- sd(valores_observados)
desvio_padrao

# Calcular o erro padrão da média
erro_media <- desvio_padrao / sqrt(tamanho_amostra)
erro_media

# VALORES PREDITOS
# Calcular a média
media <- mean(valores_preditos)
media

# Calcular o desvio padrão
desvio_padrao <- sd(valores_preditos)

desvio_padrao

# Calcular o erro padrão da média
erro_media <- desvio_padrao / sqrt(tamanho_amostra)
erro_media

# Calcular o erro quadrático  RMSE
erro_quadratico <- (valores_observados - valores_preditos) ^ 2

# Calcular a média dos erros quadráticos
media_erro_quadratico <- mean(erro_quadratico)

# Calcular o RMSE
rmse <- sqrt(media_erro_quadratico)
rmse


# Criar previsões para o modelo
df$predicted <- predict(glm(Grain ~ TotalBiomass60Days:Temp_Drought_Interaction, data = df, family='Gamma'(link='identity')))



# Criar gráfico com as retas ajustadas para cada tratamento
ggplot(df, aes(x = valores_observados, y = valores_preditos)) +
  geom_point(shape = 21, fill = "gray", color = "black", alpha = 0.8, size = 3) +  # Pontos brancos com contorno preto
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, linewidth = 1, color = "black") +  # Linha preta do modelo
  theme_classic() +
  labs(title = "",
       x = "Grain production observated (g DW)",
       y = "Grain production predicted (g DW)") + 
  theme(text = element_text(size = 14),
        plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
        axis.title = element_text(face = "bold"),
        legend.position = "top") +
  coord_fixed(ratio = 1)  # Mantém o gráfico quadrado

### melhorando o grafico padrao global change biology
library(ggplot2)

ggplot(df, aes(x = valores_observados, y = valores_preditos, color = Trataments)) +
  geom_point(alpha = 0.8, size = 3) +  # Pontos mais visíveis
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, linewidth = 1) +  # Linhas ajustadas por tratamento
  scale_color_manual(values = c("#1b9e77", "#d95f02", "#7570b3", "#e7298a")) +  # Cores diferenciadas
  theme_classic() +
  labs(title = "Relação entre Biomassa Total e Produção de Grãos",
       x = "Biomassa Total (60 dias) [g/m²]",
       y = "Produção de Grãos [g/m²]",
       color = "Tratamento") +  # Título da legenda ajustado
  theme(text = element_text(size = 14),
        plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
        axis.title = element_text(face = "bold"),
        legend.position = "top")  # Posição da legenda ajustada





#teste

library(ggplot2)

# Criar previsões para o modelo
df$predicted <- predict(glm(Grain ~ TotalBiomass60Days:Trataments, 
                            family = Gamma(link = "identity"), data = df), 
                        type = "response")

# Criar um dataframe para os valores observados e preditos
df_long <- data.frame(
  TotalBiomass60Days = rep(df$TotalBiomass60Days, 2),
  Grain = c(df$Grain, df$predicted),
  Tipo = rep(c("Observado", "Predito"), each = nrow(df)),
  Trataments = rep(df$Trataments, 2)
)

# Criar gráfico com as retas ajustadas e valores observados/preditos em cores diferentes
ggplot(df_long, aes(x = TotalBiomass60Days, y = Grain, color = Tipo)) + 
  geom_point(aes(shape = Tipo), alpha = 0.6) +  # Adiciona pontos ao gráfico com diferentes formas
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +  # Adiciona retas ajustadas
  theme_minimal() + 
  labs(title = "Relação entre Biomassa Total e Produção de Grãos",
       x = "Biomassa Total (60 dias)",
       y = "Produção de Grãos") + 
  theme(legend.title = element_blank())  # Remove título da legenda



# MODELO GAM

modelo_gam <- gam(Grain ~ s(TotalBiomass60Days, by = Trataments, bs = "cs", k = 5),
                  family = gaussian(link = "identity"),
                  data = df,
                  method = "REML")
summary(modelo_gam)



df$Preditos <- predict(modelo_gam, type = "response")

library(ggplot2)

ggplot(df, aes(x = Preditos, y = Grain)) +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
  labs(x = "Valores Observados", y = "Valores Preditos", title = "Comparação entre Valores Observados e Preditos") +
  theme_minimal()



### grafico GAM
modelo_gam <- gam(Grain ~ s(TotalBiomass60Days, by = Trataments, bs = "cs", k = 5),
                  family = gaussian(link = "identity"),
                  data = df,
                  method = "REML")

